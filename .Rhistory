tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(ifelse(retrieved_data, data, data.frame()))
}
census_data <- retrieve_census_data(current_year)
if(is.null(dim(census_data))) { print("Yes")}
dim(census_data)
census_data <- retrieve_census_data(2500)
if(nrows(census_data) == 0) { print("Yes")}
if(nrow(census_data) == 0) { print("Yes")}
nrow(census_data)
nrow(census_data)
is.NULL(nrow(census_data))
is.null(nrow(census_data))
if(is.null(nrow(census_data))) { print("Yes")}
census_data <- retrieve_census_data(current_year)
if(is.null(nrow(census_data))) { print("Yes")}
nrow_census_data
is.null(nrow(census_data))
View(census_data)
View(census_data)
retrieve_census_data <- function(year) {
retrieved_data = FALSE
for(i in 0:10) {
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)()
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(ifelse(retrieved_data, data, data.frame()))
}
census_data <- retrieve_census_data(current_year)
View(census_data)
retrieve_census_data <- function(year) {
data = 0
retrieved_data = FALSE
for(i in 0:10) {
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(ifelse(retrieved_data, data, data.frame()))
}
census_data <- retrieve_census_data(current_year)
retrieve_census_data <- function(year) {
data = 0
retrieved_data = FALSE
for(i in 0:10) {
if(retrieved_data) {break}
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(ifelse(retrieved_data, data, data.frame()))
}
census_data <- retrieve_census_data(current_year)
View(census_data)
retrieve_census_data <- function(year) {
data = data.frame()
retrieved_data = FALSE
for(i in 0:10) {
if(retrieved_data) {break}
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(retrieved_data, data, data.frame)
}
census_data <- retrieve_census_data(current_year)
retrieve_census_data <- function(year) {
data = data.frame()
retrieved_data = FALSE
for(i in 0:10) {
if(retrieved_data) {break}
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
}, error = function(e) {
})
}
return(data)
}
census_data <- retrieve_census_data(current_year)
if(is.null(nrow(census_data))) { print("Yes")}
dim(census_data)
nrow(census_data)
census_data <- retrieve_census_data(2050)
if(is.null(nrow(census_data))) { print("Yes")}
nrow(census_data)
if(is.zero(nrow(census_data))) { print("Yes")}
if(nrow(census_data) == 0) { print("Yes")}
census_data <- retrieve_census_data(current_year)
if(nrow(census_data) == 0) { print("Yes")}
nrow(census_data)
library(readxl)
?source
?readxl
library(readxl)
## Load xlsx requirements
thing <- read_xlsx("ACSRequirements.xlsx", 0)
source('~/R/ACSAutomation/ACSAutomationScript.R', echo=TRUE)
## Load xlsx requirements
thing <- read_xlsx("ACSRequirements.xlsx", 1)
View(thing)
View(census_data)
data2 <- tidycensus::load_variables(year - i, "acs5", cache = TRUE)
View(data2)
## Load xlsx requirements
DEVO <- read_xlsx("ACSRequirements.xlsx", 1)
CNAC <- read_xlsx("ACSRequirements.xlsx", 2)
Parenting <- read_xlsx("ACSRequirements.xlsx", 3)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
year = 2019,
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "S0101_C01_002",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
year = 2019,
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "S0101_C01_002",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
year = 2019,
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "B05013_003",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
## Import data
tidycensus::census_api_key("c26a4b8f1ec3d0bcee44f9e2ffd45a94a5f8c034", install = TRUE)
current_year = as.integer(format(Sys.Date(), "%Y"))
latest_year = current_year
retrieve_census_data <- function(year) {
data = data.frame()
retrieved_data = FALSE
for(i in 0:10) {
if(retrieved_data) {break}
tryCatch({
data <- tidycensus::load_variables(year - i, "acs5/subject", cache = TRUE)
print(data)
retrieved_data = T
latest_year = year-i
}, error = function(e) {
})
}
return(data)
}
View(data)
tidycensus::get_acs()
get_acs(geography="county")
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "B05013_003",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "B05013",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "B05013",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = T)     # keep many extra variables related to location (sometimes useful)
View(acs)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "S0101",      # found this table number by scanning b19 above
geometry = T,          # include the shape file to enable mapping?
keep_geo_vars = F)     # keep many extra variables related to location (sometimes useful)
View(acs)
acs <- tidycensus::get_acs(
geography = "county",  # geography options include "county", "tract", "block group", "state"
state = "48",          # FIPS code 48 for texas
#county = "201",       # can specify certain counties in TX or get all of them
survey = "acs5",       # designate American Community Survey 5-year estimate. acs1 and others also options
table = "S0101"       # found this table number by scanning b19 above
)
acs <- tidycensus::get_acs(
geography = "county",
state = "48",
year = 2010,
#county = "201",
survey = "acs5",
table = "S0101"
)
acs <- tidycensus::get_acs(
geography = "county",
state = "48",
year = 2010,
#county = "201",
survey = "acs5",
table = "S0101") %>%
filter(NAME="Harrison County, Texas")
library(tidyverse)
as = c(first = ‘a’)
as <- c(first = 'a'', second = 'b')
as <- c(first = 'a', second = 'b')
as[first]
as
as["first"]
as["first"] + "sshole"
source('~/R/ACSAutomation/ACSAutomationScript.R', echo=TRUE)
View(houston_ages)
View(harrison_ages)
call_tidycensus <- function(geo, table) {
filter_zip = F
if(geo == "Texas" || geo == "state") {
state <- texas_acs_code
geography <- "state"
county <- NULL
zcta <- NULL
} else if(geo == "Harris County" || geo == "county" ) {
state <- texas_acs_code
geography <- "county"
county <- harris_county_acs_code
zcta <- NULL
} else if(geo == "Houston" || geo == "city") {
filter_zip <- T
state <- texas_acs_code
geography <- "zcta"
county <- NULL
zcta <- houston_zip_codes
}
results <- tidycensus::get_acs(
geography = geography,
zcta = zcta,
state = state,
county = county,
survey = "acs5",
table = table
)
# return(results %>% filter(filter_zip & GEOID %in% houston_zip_codes))
return(results)
}
#load ages
houston_ages = call_tidycensus("city", "S0101")
texas_ages = call_tidycensus("state", "S0101")
View(texas_ages)
texas_ages = call_tidycensus("state", "S0101")
harrison_ages = call_tidycensus("county", "S0101")
View(harrison_ages)
#load ages
houston_ages = call_tidycensus("city", "S0101")
add_variable_names <- function(variables, data, variable_name) {
left_join(variables, data, by = c(variable_name = "variable")) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
houston_ages <- add_variable_names(age_variables, houston_ages, "age_demo_variables")
houston_ages <- add_variable_names(age_variables, houston_ages, "age_demo_variables")
View(houston_ages)
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c(variables[1] = "variable")) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c(variables[1] = "variable")) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
age_variables[1]
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c(variables[1] = data[3])) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c(variables[1] = data[3])) %>%
# select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
View(houston_ages)
age_variables <- data.frame(variable = age_demo_variables, age_demo_variable_names = age_demo_variable_names)
houston_ages <- add_variable_names(age_variables, houston_ages, "age_demo_variables")
age_demo_variables <- c(
"S0101_C01_001",
"S0101_C01_002",
"S0101_C01_003",
"S0101_C01_004",
"S0101_C01_005",
"S0101_C01_006",
"S0101_C01_007",
"S0101_C01_008",
"S0101_C01_009",
"S0101_C01_010",
"S0101_C01_011",
"S0101_C01_012",
"S0101_C01_013",
"S0101_C01_014",
"S0101_C01_015",
"S0101_C01_016",
"S0101_C01_017",
"S0101_C01_018"
)
age_demo_variable_names <- c(
"Total population",
"Under 5 years",
"5 to 9 years",
"10 to 14 years",
"15 to 19 years",
"20 to 24 years",
"25 to 29 years",
"30 to 34 years",
"35 to 39 years",
"40 to 44 years",
"45 to 49 years",
"50 to 54 years",
"55 to 59 years",
"60 to 64 years",
"65 to 69 years",
"70 to 74 years",
"75 to 79 years",
"80 to 84 years"
)
age_variables <- data.frame(variable = age_demo_variables, age_demo_variable_names = age_demo_variable_names)
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c("variable")) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(age_demo_variables) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
houston_ages <- add_variable_names(age_variables, houston_ages)
add_variable_names <- function(variables, data) {
left_join(variables, data, by = c("variable")) %>%
select(-moe, -NAME, -GEOID) %>%
group_by(variable) %>%
mutate(estimate = sum(estimate)) %>%
distinct()
}
houston_ages <- add_variable_names(age_variables, houston_ages)
View(houston_ages)
source('~/R/ACSAutomation/ACSAutomationScript.R', echo=TRUE)
View(texas_ages)
houston_ages <- add_variable_names(age_variables, houston_ages)
texas_ages <- add_variable_names(age_variables, texas_ages)
harrison_ages <- add_variable_names(age_variables, harrison_ages)
texas_ages["Total population"]
texas_ages[age_demo_variable_names]
texas_ages[age_demo_variable_names]
texas_ages[age_demo_variable_names = "Total population"]
texas_ages which(texas_ages$age_demo_variable_names == "Total population")
which(texas_ages$age_demo_variable_names == "Total population")
which(texas_ages$age_demo_variable_names == "Total population")
texas_ages[1,]
texas_ages[1,][estimate]
texas_ages[1,]["estimate"]
texas_ages[1,]["estimate"] + 3
View(harrison_ages)
View(houston_ages)
View(harrison_ages)
View(texas_ages)
View(houston_ages)
View(harrison_ages)
View(harrison_ages)
View(houston_ages)
View(texas_ages)
View(houston_ages)
View(texas_ages)
harris_z <- get_decennial(
geography = "zcta",
geometry = TRUE,
summary_var = "P001001",
cb = FALSE)
harris_z <- get_decennial(
geography = "zcta",
variables = c(white = "S0101"),
geometry = TRUE,
summary_var = "P001001",
cb = FALSE)
harris_z <- get_decennial(
geography = "zcta",
variables = c(White = "P005003", Black = "P005004", Asian = "P005006", Hispanic = "P004003"),
geometry = TRUE,
summary_var = "P001001",
cb = FALSE)
harris_z <- get_decennial(
geography = "zcta",
variables = c(White = "P005003", Black = "P005004", Asian = "P005006", Hispanic = "P004003"),
geometry = TRUE,
summary_var = "P001001",
cb = FALSE)
harris_z <- get_acs(
geography = "zcta",
survey="S0101",
geometry = TRUE,
summary_var = "P001001",
cb = FALSE)
harris_z <- get_acs(
geography = "zcta",
survey="S0101",
geometry = TRUE)
harris_z <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
geometry = TRUE)
View(harris_z)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta=12211,
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA5 35586",
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA5 35586",
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA5 35586",
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta5",
survey="acs5",
table="S0101",
zcta="35586",
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA 35586",
geometry = TRUE)
harris_z_2 <- get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA 35586",
geometry = TRUE)
?tidycensus::get_acs
tidycensus::get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA 35586",
geometry = TRUE)
harris_z_2 <- tidycensus::get_acs(
geography = "zcta",
survey="acs5",
table="S0101",
zcta="ZCTA 35586",
geometry = TRUE)
harris_z_2 <- tidycensus::get_acs(
geography = "tract",
survey="acs5",
table="S0101",
state="TX",
geometry = TRUE)
View(harris_z_2)
